✨ Utility ✨ 
=================================================================
 ✏️   ☑️ ✍️  ✒️  ✍️ ▶️ 
 ✏️ (Pencil)  ☑️ ✍️ (Person writing) ✒️ (Black pen) ✍️ (Writing hand)
emoji => press Window + . (dot) special symbol char character
=================================================================
In programming, casing refers to the capitalization style used for naming variables, functions, classes, etc. 
Common casing styles include camel case, Pascal case, snake case, and kebab case


Camel Case => myVariableName
Pascal Case => MyVariableName
Snake Case => my_variable_name
Kebab Cas => my-variable-name
Flat Case => myvariablename
Upper Case => MY_VARIABLE_NAME

• Camel Case: Capitalizes the first letter of each word after the first word (e.g., myVariableName).  
• Pascal Case: Capitalizes the first letter of each word (e.g., MyVariableName). [1]  
• Snake Case: Separates words with underscores and uses lowercase letters (e.g., my_variable_name).  
• Kebab Case: Separates words with hyphens and uses lowercase letters (e.g., my-variable-name). 
• Flat Case: No capitalization or punctuation is used, simply concatenating all letters (e.g., myvariablename).
• Upper Case (Constant Case): All letters are capitalized, often used for constants (e.g., MY_VARIABLE_NAME).   

=================================================================
./     ✏️=> means current directory
../    ✏️=> means one folder back
/      ✏️=> means root 
=================================================================
google crome 
clear()  => clear console tab
=================================================================
Query parameter  ✏️=>   www.sj.com/employee?id= nitin
route parameter  ✏️=>   www.sj.com/ employee/2
=================================================================
==   ✏️=> (Loose Equality):
		Compares values after converting them to a common type if necessary. 
		May lead to unexpected results due to type coercion. 
		Example: "5" == 5 evaluates to true because the string "5" is converted to the number 5. 
===  ✏️=>(Strict Equality): 
		Compares both value and type directly, without any type conversion. 
		Provides more predictable and reliable results. 
		Example: "5" === 5 evaluates to false because the string "5" is not the same type as the number 5. 
=================================================================

=================================================================


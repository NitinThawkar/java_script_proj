
✨ MDN : 
https://developer.mozilla.org/en-US/docs/Glossary/IIFE
https://www.w3schools.com/js/js_function_parameters.asp

Free Apis :(search):
https://github.com/public-api-lists/public-api-lists?tab=readme-ov-file
https://apilist.fun/

#########################################################################
my javsript notes
##################################################################################
Variable 
fullname = "devi jons";
age = 24;
price = 20.30;
address = null;
mark = undefined;
isFollow = true;

typeOf
----------------------------------

let, const & var

var : Variable can be re-declared & updated. A global scope variable.

let : Variable cannot be re-declared but can be updated. A block scope variable.

const : Variable cannot be re-declared or updated. A block scope variable.

----------------------------------
datatype
typeOf <vriable Name> 
Primitive Types : Number, String, Boolean, Undefined, Null, BigInt, Symbol
default its undefined
non prenetive : object,String

##################################################################################
in javascript function can be passed as parameter.



//*****************************  Arrow function  *****************************//
//anonymous function can be used as arrow function.
// arrow function can not be hoisted.
// arrow function can not be used as constructor.
// arrow function can not be used as method.
// arrow function can not be used as getter and setter.
// arrow function can not be used as call and apply.
// arrow function can not be used as arguments object.
// arrow function can not be used as yield.
// arrow function can not be used as new.target.
// arrow function can not be used as prototype.
// arrow function can not be used as super.
// arrow function can not be used as this.
// arrow function can not be used as new.
// arrow function can not be used as arguments.
// arrow function can not be used as default parameters.
// arrow function can not be used as rest parameters.
// arrow function can not be used as computed property keys.
// arrow function can not be used as generator methods.
// arrow function can not be used as async functions.
// arrow function can not be used as async generator methods.
// arrow function can not be used as concise methods.
// arrow function can not be used as concise generator methods.
// arrow function can not be used as concise async methods.
// arrow function can not be used as concise async generator methods.


let add = (a, b) => {
    return a + b;
}

//***************************************************************************//

##################################################################################

// higher order function is a function that takes another function as a parameter or returns a function as a result.

----------------------------------------
// map function is used to perform operation on each element of array.
// map function return new array.
// map function does not change original array.

let num = [1,2,3,4,5,6,7,8,9,10];
let caclulate = num.map(n => n*2);
------------------------------------------------------

// filter function is used to filter out the elements from array.
// filter function return new array.
// filter function does not change original array.
// filter function takes callback function as parameter.
// callback function takes 3 parameters element,index,array.
// callback function return boolean value.

let num = [1,2,3,4,5,6,7,8,9,10];
let odd = num.filter(n => n%2!=0);
let even = num.filter(n => n%2==0);
console.log(even);

##################################################################################
DOM Manipulation

tagName : returns tag for element nodes

innerText : returns the text content of the element and all its children

innerHTML : returns the plain text or HTML contents in the element

textContent : returns textual content even for hidden elements

============================================================
Attributes
getAttribute( attr ) //to get the attribute value
setAttribute( attr, value ) //to set the attribute value

============================================================
Style
node.style
==============================================================

DOM Manipulation

Insert Elements
let el = document.createElement(“div“)
node.append( el ) //adds at the end of node (inside)
node.prepend( el ) //adds at the start of node (inside)
node.before( el ) //adds before the node (outside)
node.after( el ) //adds after the node (outside)
==============================================================

##################################################################################
Lorem  press tab

lorem100 >> press tab or enter
<p>lorem20</20>
p*5>lorem  #press enter , it will  show  paragraph
-------------------------------------------

#add html lile >> type ! >> press enter >>Generate HTML Boilerplate Code

# type p pres tab >>genagrate paragraph tag
# p.para  >> paragraph tag with para style class
# div#city >> div tag with city id 
# div>span  >> Generate parent and child tag  press enter
# ul>li*3  >>Generate multiple tags
# h1+p+div  >> Generate sibling elements
#  <table>tr>td*3>lorem3</table>
##################################################################################

//###  Promises

//Promise is for “eventual” completion of task. It is an object in JS.
//It is a solution to callback hell.
//let promise = new Promise( (resolve, reject) => { .... } )
//Function with 2 handlers *resolve & reject are callbacks provided by JS

Promises

A JavaScript Promise object can be:

Pending : the result is undefined

Resolved : the result is a value (fulfilled)

Rejected : the result is an error object
-----------------
resolve( result )

reject( error )
---------------
*Promise has state (pending, fulfilled) & some
result (result for resolve & error for reject).
---------------
.then( ) & .catch( )

promise.then( ( res ) => { .... } )

promise.catch( ( err ) ) => { .... } )

##################################################################################
Async await

https://developer.mozilla.org/en-US/docs/Glossary/IIFE
##################################################################################
Things learned:
-----------------------------------------------------------------------------------------------------
1.  What is Function Statement ?
A.  A normal function that we create using Naming convention. & By this we can do the Hoisting.
      For Ex  -  function xyz(){
                            console.log("Function Statement");
                       }
-----------------------------------------------------------------------------------------------------
2.  What is Function Expression ?
A.  When we assign a function into a variable that is Function Expression. & We can not do Hoisting by this becz it acts like variable.
      For Ex - var a = function(){
                            console.log("Function Expression");
                    }
-----------------------------------------------------------------------------------------------------
3.  What is Anonymous Function ?
A.  A Function without the name is known as Anonymous Function. & It is used in a place where function are treated as value.
      For Ex - function(){
                     }
-----------------------------------------------------------------------------------------------------
4.  What is Named Function Expression ?
A.  A function with a name is known as Named Function Expression.
      For Ex - var a = function xyx(){
                            console.log("Names Function Expression");
                     }
-----------------------------------------------------------------------------------------------------
5.  Difference b/w Parameters and Arguments ?
A.  When we creating a function  & put some variabels in this ( ) that is our Parameters.
       For Ex - function ab( param1, param2 ){
                              console.log("
                      }
       & When we call this function & pass a variabel in this ( ) that is our Arguments
       For Ex - ab( 4, 5 );
-----------------------------------------------------------------------------------------------------
6.  What is First Class Function Or First class citizens?
A.   The Ability of use function as value,
*     Can be passed as an Argument,
*     Can be executed inside a closured function &
*     Can be taken as return form.
       For Ex - var b = function(param){
                             return function xyz(){
                                     console.log(" F C F ");
                             }
                     } 
-----------------------------------------------------------------------------------------------------
7. Function are heart of JS. They are called first class citizens or first class functions because they have the ability to be stored in the variables, passed as parameters and arguments. They can also be returned in the function.


#######################################################################################################
1. Function that is passed on as argument to another function is called callback function.
2. setTimeout helps turn JS which is sinhlethreaded and synchronous into asynchronous.
3. Event listeners can also invoke closures with scope.
4. Event listeners consume a lot of memory which can potentially slow down the website therefore it is good practice to remove if it is not used.
#######################################################################################################
Writing to keep it in my mind:
JavaScript is a synchronous single-threaded language.
When script is run an execution context is created. It contains two blocks: 
One memory block and second code block.
Memory block contains all the variables and functions as key value pairs and code blocks is where all the code is executed line by line.
Memory block is also called environment variable and the code block is known as thread of execution.
================================================================================================
1.Memory component
2.Code component
In memory component variable and functions values can be stored in a  key value format.
Code component is a place where whole JavaScript code is executed
Memory component is also called as variable environment 
And code component is also called as thread of execution.
================================================================================================
1. Whenever any JavaScript code is executed an execution context is created and it is the Global Execution Context.
2. An Execution Context is basically a box which has two components called Memory Component(Variable Environment) and Code Component(Thread Of Execution).
3. The Execution context is created in two phases
   a. Memory Creation Phase : In this Phase, Memory is allocated to all the variables and functions which are present in the           global scope. Special keyword Undefined in case of variables and literally the whole function in case of functions.
   b. Code Execution Phase : In this Phase, code is executed line by line.

4. Whenever there is a function invocation an all new execution context is created and same process is followed again.
5. If there is any function parameter then it is also allocated memory while creating the execution context of the function.
6. Whenever return keyword is encountered , it means the task of function is over and it returns back the control of the program back to the place where it was invoked. and with this this execution context is deleted from stack.

7. Call Stack is basically a stack which maintains the order of execution of execution context. Whenever a code is executed the Global Execution Context is pushed into the stack first and later on as per the function invocation the  execution context is pushed into the stack. When the function code is done executing the execution context is popped out and last the Global Execution Context s also deleted.

================================================================================================
After some research what I understood is -> When a JavaScript program runs, a global execution context is created. This context consists of two phases:
a) Memory Creation Phase :
.Variable declarations are scanned and allocated memory, initialized with the value 'undefined'.
.Function declarations are scanned and stored in memory with their entire code.

1. In JS, before the code is executed, the variables get initialized to undefined.
2. Arrow functions enact as variables and get "undefined" during the memory creation phase while functions actually get 

2 Golden Rules:
1. Variable declarations are scanned and are made undefined
2. Function declarations are scanned and are made available

1. Hoisting in JavaScript is a process in which all the Variables, Functions and Class defination are declared BEFORE execution of the code 
3. Variables are initialised to UNDEFINED when they are declared and Function defination is stored AS IT IS.
4. They are declared in Memory Allocation Phase in the Memory Component of Execution Context, so we can use them even BEFORE they are declared.
5. UNDEFINED means Variable has been declared but value is not ASSIGNED but NOT DEFINED means Variables is NOT DECLARED.
6. When we assign Variable to a Function defination, we CAN NOT call this Variable as Function BEFORE declaration as it will behave as Variable with UNDEFINED value.
================================================================================================
### How functions work in JS  & Variable Environment

1. We learnt how functions work in JS.
2. At first a global execution context is created, which consists of Memory and code and has 2 phases: Memory allocation phase and code execution phase.
3. In the first phase, the variables are assigned "undefined" while functions have their own code.
4. Whenever there is a function declaration in the code, a separate local execution context gets created having its own phases and is pushed into the call stack.
5. Once the function ends, the EC is removed from the call stack.
6. When the program ends, even the global EC is pulled out of the call stack.
================================================================================================
### undefined vs not defined in JS

1. Undefined is like a placeholder till a variable is not assigned a value.
2. undefined !== not defined
3. JS- weakly typed language since it doesn't depend on data type declarations.
----------------------------------------
1.Undefined is a Special Placeholder which is used to reserve memory for the variables in the memory creation phase. Even before a single line of code is executed JS engine assigns undefined to the variables.

2.Not Defined means if we try to console or access any variable which is not declared in the code then we get Not Defined error.

3. JS is a loosely typed language or weakly typed language means it does not attaches its variables to specific data types like in C++ and java.

4.Remember undefined !== not defined.

----------------------------------------
1. Undefined is an Special Keyword and Placeholder Which is kept inside the Variable until some Values are not defined to it. It will stay inside the variables if  no value is not Assigned.
2. undefined!=not defined, Because undefined means variable is declared but no value is Assigned and not defined means Variable is not even declared.
3. JS is an Loosely Typed Language or Weakly Typed Language, You can Use same variable to store String, Integer, Boolean type Values in same.
Example: 
var a;
console.log(a);
a=10;
console.log(a);
a="hello JS";
console.log(a);
================================================================================================
###  The Scope Chain, 🔥Scope & Lexical Environment 

1. Scope of a variable is directly dependent on the lexical environment.
2. Whenever an execution context is created, a lexical environment is created. Lexical environment is the local memory along with the lexical environment of its parent. Lexical as a term means in hierarchy or in sequence.
3. Having the reference of parent's lexical environment means, the child or the local function can access all the variables and functions defined in the memory space of its lexical parent.
4. The JS engine first searches for a variable in the current local memory space, if its not found here it searches for the variable in the lexical environment of its parent, and if its still not found, then it searches that variable in the subsequent lexical environments, and the sequence goes on until the variable is found in some lexical environment or the lexical environment becomes NULL.
5. The mechanism of searching variables in the subsequent lexical environments is known as Scope Chain. If a variable is not found anywhere, then we say that the variable is not present in the scope chain.
================================================================================================
###  let & const in JS 🔥Temporal Dead Zone

1. let and const are hoisted but its memory is allocated at other place than window which cannot be accessed before initialisation.
2. Temporal Dead Zone exists until variable is declared and assigned a value.
3. window.variable OR this.variable will not give value of variable defined using let or const.
4. We cannot redeclare the same variable with let/const(even with using var the second time).
5. const variable declaration and initialisation must be done on the same line.
6. There are three types of error: [1] referenceError {given where variable does not have memory allocation} [2] typeError {given when we change type that is not supposed to be changed} [3] syntaxError {when proper syntax(way of writing a statement) is not used}.
7. Use const wherever possible followed by let, Use var as little as possible(only if you have to). It helps avoid error.
8. Initialising variables at the top is good idea, helps shrinks TDZ to zero.
-------------------------------------------------------------------------------
-> let and const are hoisted. we cant use them before initialization is result of "temporal dead zone".
-> js use diff memory than global execution context to store let and cost. which is reason behind "temporal dead zone"
-> level of strictness ... var<<let<<const.
-> var //no temporal dead zone, can redeclare and re-initialize, stored in GES
    let //use TDZ, can't re-declare, can re-initialize, stored in separate memory
    const //use TDZ, can't re-declare, can't re-initialize, stored in separate memory
-> syntax error is similar to compile error. while type and reference error falls under run time error.
-> syntax error ... violation of JS syntax
    type error ...  while trying to re-initialize const variable
    reference error ... while trying to access variable which is not there in global memory.
================================================================================================
###  BLOCK SCOPE & Shadowing in JS
let and const blocked scope

1. Code inside curly bracket is called block.
2. Multiple statements are grouped inside a block so it can be written where JS expects single statements like in if, else, loop, function etc.
3. Block values are stored inside separate memory than global. They are stored in block. (the reason let and const are called block scope)
4. Shadowing of variables using var, let and const.
5. The shadow should not cross the scope of original otherwise it will give error.
6. shadowing let with var is illegal shadowing and gives error.
7. var value is stored in nearest outer function or global scope and hence can be accessed outside block as well whereas same is not the case with let and const.

-----------------------------------------------
Block :- It is used to combine multiple statement into one statement so that we can use it at those places where javascript expects to have single statement.
Scope :- scope of a variable or a function is the place where these are accessible.
Block scope :-  The variables and function present within the scope of a block section. And block follows the lexical scope chain pattern while accessing the variable.
Shadowing :-  Providing same name to the variable as of those variable which are present in outer scope.
================================================================================================
###  Closures
Things learned:
1. Function bundled with lexical scope is called closure.
2. Even if we return the function, it still remembers its original lexical environment and local storage so it can access values.
3. If we write return function x(){.....} --- this automatically returns the value.
4. The function that is returned is reference so any change in value of that variable inside function will be reflected as such.


================================================================================================
### setTimeout + Closures Interview Question
### CRAZY JS INTERVIEW
================================================================================================
### FIRST CLASS FUNCTIONS
1.  What is Function Statement ?
A.  A normal function that we create using Naming convention. & By this we can do the Hoisting.
      For Ex  -  function xyz(){
                            console.log("Function Statement");
                       }
----------------------------------------------------------------------------------------------
2.  What is Function Expression ?
A.  When we assign a function into a variable that is Function Expression. & We can not do Hoisting by this becz it acts like variable.
      For Ex - var a = function(){
                            console.log("Function Expression");
                    }
----------------------------------------------------------------------------------------------
3.  What is Anonymous Function ?
A.  A Function without the name is known as Anonymous Function. & It is used in a place where function are treated as value.
      For Ex - function(){
                     }
----------------------------------------------------------------------------------------------
4.  What is Named Function Expression ?
A.  A function with a name is known as Named Function Expression.
      For Ex - var a = function xyx(){
                            console.log("Names Function Expression");
                     }
----------------------------------------------------------------------------------------------
5.  Difference b/w Parameters and Arguments ?
A.  When we creating a function  & put some variabels in this ( ) that is our Parameters.
       For Ex - function ab( param1, param2 ){
                              console.log("
                      }
       & When we call this function & pass a variabel in this ( ) that is our Arguments
       For Ex - ab( 4, 5 );
----------------------------------------------------------------------------------------------
6.  What is First Class Function Or First class citizens?
A.   The Ability of use function as value,
*     Can be passed as an Argument,
*     Can be executed inside a closured function &
*     Can be taken as return form.
       For Ex - var b = function(param){
                             return function xyz(){
                                     console.log(" F C F ");
                             }
                     } 
----------------------------------------------------------------------------------------------
7. Function are heart of JS. They are called first class citizens or first class functions because they have the ability to be stored in the variables, passed as parameters and arguments. They can also be returned in the function.
================================================================================================
### Callback Functions 

1. Function that is passed on as argument to another function is called callback function.
2. setTimeout helps turn JS which is sinhlethreaded and synchronous into asynchronous.
3. Event listeners can also invoke closures with scope.
4. Event listeners consume a lot of memory which can potentially slow down the website therefore it is good practice to remove if it is not used.
================================================================================================
### Asynchronous JavaScript & EVENT LOOP

The Event  Loop pushes the "queue" into the Call Stack only when the Call Stack is empty (i.e. the global execution context has been pushed off the call stack).
The order in which the Event Loop works is:
1. Call Stack
2. Microtask Queue
3. Callback Queue

In JavaScript, the event loop, microtask queue, callback queue, and call stack are all key components that help manage the asynchronous nature of the language.

Call Stack:

The call stack is a data structure that keeps track of the function calls in your code. It follows the Last In, First Out (LIFO) principle, meaning the last function that gets pushed onto the stack is the first one to be popped off when the function completes.
Callback Queue (Task Queue):

The callback queue, also known as the task queue, holds tasks (callbacks or events) that are ready to be executed. These tasks usually come from asynchronous operations, such as DOM events, HTTP requests, or timers.
Event Loop:

The event loop is responsible for continuously checking the call stack and the callback queue. If the call stack is empty, the event loop takes the first task from the callback queue and pushes it onto the call stack for execution.
Microtask Queue:

The microtask queue holds tasks that are also ready to be executed but has a higher priority than the callback queue. Microtasks are usually scheduled by JavaScript promises, mutation observers, and other similar mechanisms.
Here's how they work together:

When an asynchronous operation is encountered, such as a setTimeout or a Promise, the callback associated with that operation is sent to the callback queue after the specified time or when the Promise settles.

When the call stack is empty (no functions being executed), the event loop takes the first task from the microtask queue and pushes it onto the call stack.

If the microtask queue is empty, the event loop looks at the callback queue and pushes the first task onto the call stack.

This process repeats, allowing JavaScript to handle asynchronous operations without blocking the main thread.

Understanding these concepts is crucial for writing efficient and responsive asynchronous JavaScript code, as it helps you manage the order of execution and prevent blocking the user interface.
================================================================================================
### TRUST ISSUES with setTimeout()

1. The setTimeout function stores it in the callback queue which is executed only after call stack is empty, even if setTimeout is set to 0ms. 
2. setTimeout ensures that minimum it will take the time mentioned because it may be paused due to call stack not empty.


================================================================================================
### Higher-Order Functions
1. Follow DRY(Don't Repeat Yourself) principle while coding.
2. Use function to stop writing repeating line of codes.
3. Function that takes another function as argument(callback function) is known as Higher order functions.


1) Pure Function
2) Function Composition
3) Point free Functional Programming
4) SOLID principles
================================================================================================
### Higher-Order
### map, filter & reduce 

1. map method is used when we want transformation of whole array.
2. filter is used when we want to filter the arrar to obtain required value.
3. reduce is used when we want to reduce the array to single value eg (max, min, avg, sum, difference etc).
4. reduce passes two arguments one function(which includes accumulator and initial value as argument itself) and another initial value of accumulator.
5. Homework:
const output = user.reduce(function(acc, curr){
    if (curr.age < 30){
        acc.push(curr.firstName);
    }
    return acc;
}, [ ])

console.log(output);
================================================================================================
### Callback Hell

1.) "Time, tide and JS waits for none"
2.) Callback function enables us to do async programming in JS. We use this for some functions that are interdependent on each other for execution. For eg: Ordering can be done after adding items in cart. So we pass cb functions as argument to functions which then call the cb function passed. However this causes some problems:

     a.) Callback Hell: When a callback function is kept inside another function, which in turn is kept inside another function. (in short, a lot of nested callbacks). This causes a pyramid of doom structure causing our code to grow horizontally, making it tough to manage our code.

     b.) Inversion of control: This happens when the control of program is no longer in our hands. In nested functions, one API calls the callback function received but we don't know how the code is written inside that API and how will it effect our code. Will our function be called or not? What if called twice? What if it has bogs inside it? We have given control of our code to other code. 

3.) We will see the solutions in next episode.
================================================================================================
### Promises 

1. Before promise we used to depend on callback functions which would result in 1.) Callback Hell (Pyramid of doom) | 2.) Inversion of control
2. Inversion of control is overcome by using promise.
  2.1) A promise is an object that represents eventual completion/failure of an asynchronous operation.
  2.2) A promise has 3 states: pending | fulfilled | rejected.
  2.3)  As soon as promise is fulfilled/rejected => It updates the empty object which is assigned undefined in pending state.
  2.4) A promise resolves only once and it is immutable. 
  2.5) Using .then() we can control when we call the cb(callback) function.

3. To avoid callback hell (Pyramid of doom) => We use promise chaining. This way our code expands vertically instead of horizontally. Chaining is done using '.then()'
4. A very common mistake that developers do is not returning a value during chaining of promises. Always remember to return a value. This returned value will be used by the next .then()
--------------------------------------------------------------------------------------------

Promise is an object that represents the eventual completion of an asynchronous operation.
Promises are immutable so it can't be altered as a result it helps to get rid off inversion of control that would be occurred in case callback and by chaining of promises we can get out of the callback hell.
In chaining of promises we should use return to get the promise result so that we don't miss anything from the chain.
Thank you sir for your efforts it's just like charity (good deeds ) and God will bless you for this selflessness.


Promises is an object that represents the eventually completion or failure of an asynchronous operations. 
Disadvantage of callback
- Callback Hell (Pyramid of DOOM)
- Inversion of Control (Lost the control over the code)

We overcome the Inversion of control by using promises,

================================================================================================
### Creating a Promise, Chaining & Error Handling

const cart = [
    {
        itemName : 'Shoes',
        itemPrice : 2000
    },
    {
        itemName : 'Paint',
        itemPrice : 2500
    },
    {
        itemName : 'Kurta',
        itemPrice : 1500
    }
];

let walletBalance = 10000;

createOrder(cart)
    .then(function(orderId){
        return orderId;
    })
    .then(function(orderId){
        return proceedToPayment(orderId);
    })
    .then(function(orderStatus){
        return showOrderSummery(orderStatus);
    })
    .then(function(orderHistory){
        return updateWallet(orderHistory);
    })
    .then(function(res){
       console.log(res);
    })
    .catch((err)=>{
        console.log(err.message)
    })

function createOrder(cart){
    return new Promise(function(resolve,reject){
        if(!validateCart(cart)){
            reject(new Error("Cart is not valid"));
        }
        let orderId=10
        if(orderId){
            resolve(orderId);
        }
    })
}

function proceedToPayment(orderId){
    return new Promise(function(resolve,reject){
        if(orderId){
            resolve({paymentStatus : 1, message : "Payment successfully completed"});
        }else{
            reject(new Error("Payment Failed"));
        }
    })
}

function showOrderSummery(orderStatus){
    return new Promise(function(resolve,reject){
        if(orderStatus.paymentStatus === 1){
            resolve({status:'success', orders : cart});
        }else{
            reject(new Error("Something went wrong"));
        }
    })
}

function updateWallet(orderHistory){
    return new Promise(function(resolve,reject){
        if(orderHistory.status === 'success'){
            let orderAmount = 6000;
            walletBalance = walletBalance - orderAmount;
            resolve({balance : walletBalance, 'message':'Wallet updated'});
        }else{
            reject(new Error("Wallet balance not updated"));
        }
    })
}

function validateCart(cart){
    return true;
}

================================================================================================
### Promise api
1) promise.all()
2) promise.allsettled()
3) promise.race()
4) promise.any()

1. this keyword
2. bind, apply, and call methods
3. debouncing and throttling
================================================================================================

================================================================================================
### This kew word in javascript
1. "this" in global scope always points to the globalObject (globalObject depends on javascript runtime env)
2. "this" in a function depends on 2 things
    a. strict / non strict mode (in strict mode, "this" is undefined, in non strict mode, "this substitution" takes place and "this" points to globalObject)
    b. how the function is being invoked (if we invoke the function using the global object in strict mode, then "this" will point to that globalObject)
3. "this" in a method always points to the object that is used to invoke the method.
4. call, apply & bind are used to share a method with another object (hence the "this" keyword reference would also change accordingly)
5. "this" inside arrow function refers to the enclosing lexical context
6. "this" in DOM points to the HTML element itself on which it is being used
================================================================================================
Spread Operator ...

const state = {count:0}
=>undefined
----------------
state

=>{count: 0}
----------------
{ ... state}
=>{count: 0}
----------------
{ ... state, count:1}
=>{count: 1}
----------------
const state = {count:0,someValue:1}

{ ... state, count:2}
=>{count: 2, someValue: 1}
----------------
================================================================================================



✨ React Notes ✨
https://www.w3schools.com/react/react_components.asp
https://react.dev/learn/installation

✨  Official Doc : 
Learn React https://18.react.dev/learn/sharing-state-between-components
https://react.dev/learn/managing-state
create resct app : https://create-react-app.dev/
form hook : https://www.react-hook-form.com/
nest js replacement : https://remix.run/
==================================================================================================================================
#### command  to run project
npm run dev
==================================================================================================================================
ChatGPT.com switched from NextJS to Remix
? create your own hook , custome hook ?

? State Lifting in React ?
? e.stopPropogation  => stop event bubbling 
#alwayes check import and export
==================================================================================================================================
Query parameter  =>   www.sj.com/employee?id= nitin
route parameter  =>   www.sj.com/ employee/2
=========================================================================
className  => use for css  (camel case)
props      => propeties  or html element propeties
onClick    => event  (camel case)	
.map()     => like for loop
htmlFor    =>
e,preventDefault =>
<React.StrictMode>   => use application run in dev mode , cause to double rendaring , Remove on Prod 
useState             => hook  to change initial value  like input  
Destructuring Props =>

<h1>{`Hello ${user}!`}</h1>  => variable subcription  (tild use here)

...Values  => ... used for creating copy 

e.target.value  => get any html element value  . like input ,button etc


useEffect
useParams    => read query string parameter from url/route path in componenetnt
useRef
useReduces  => use with dispatch , like use state , define initial state
createContex () =>  create contex and then ,create provider component and register component , and then use provider in Application , consume contex in component
Redux           => It Uses a centralised store, actions and reducers to manage state change predictibliy
usedispatch()
useselector ()
useDispatch()

==================================================================================================================================
✨ react js with vite
==================================================================================================================================
what is vite > install vite
install node and NPM 
 check node version > node -v
 npm version        > npm -v
 install  vs code
npm create vite

go to folder and 
and npm install

npm run dev (for vite)
npm start (for non vite)
==================================================================================================================================
  cd my-reacy-js-proj
  npm install
  npm run dev
  

==================================================================================================================================
type script with +Swc (Speedy Web Compiler)

Rust-based platform for the Web

SWC is an extensible Rust-based platform for the next generation of fast developer tools. It's used by tools like Next.js, Parcel, and Deno, as well as companies like Vercel, ByteDance, Tencent, Shopify, Trip.com, and more.

SWC can be used for both compilation and bundling. For compilation, it takes JavaScript / TypeScript files using modern JavaScript features and outputs valid code that is supported by all major browsers.
==================================================================================================================================
https://vite.dev/guide/
==================================================================================================================================
 https://www.w3schools.com/react/react_components.asp
---------------------------------------------------------------------------------
✨ ####  component is a java script function  which return jsx                         
----
1]
const myName ="nitin";
let myNum = 12;
function Car() {       ✏️=>component name alwayes in cap's

  {/* we can add more JS logic here */}  
  var abc ="qwe";
	
  return (
  <div>
  <h2>Hi, I am a Car! {myName}</h2>  ✏️=> multiple element should be include in div or use fragment (<></>)tags insted of div
  <h2>Hi, check number ! {(myNum)> 12 ? 'number is big' : 'number is small'}</h2>
  </div>
  );  ✏️=>jsx we can write JS or access  variables or js function 	in {}  , component name alwayes in cap's
}
export default Car ; ✏️=> we export this to use in main component
---------------------------------------------------------------------------------
2] use component inside your main component file  i.e App component.

import car from "./component/car";  ✏️=> component name with file path 

function App() {

  {/* we can add more logic here */}
	
  return (
  <div className ="App">
	<Car></Car>            ✏️=> We use Car component Here
  </div>
  
  )  ✏️=> jsx
}
==================================================================================================================================
✨ #### Props (property)


-------------------------------------
const Card =(props)=>{         ✏️=> We use structure props
return (
<div>{props.myName}
)
}
export default card
-------------------------------------
const Card =({myName})=>{           ✏️=> We use de-structure props with {} breses  dont requird props.<property>, directly can access 
return (
<div>{myName}
)
}
export default card
---------------------------------

Use In App Component

function App (){
return (<div> 
<Card Name="Nitin#"> <h1> asd </h1> </Card>  ✏️=> Passing "Nitin#" in Name property to Card cpmponent
<Card children ="Hello Sachin"> hello nitin</Card>
</div>)
}
---------------------------------
const Card =(props)=>{         ✏️=> props as children
return (
<div>{props.children} </div>       ✏️  => props as children will return / render  whatever lines enclosed between <cadrd> from App component
)
}
export default card          ✏️  =>  <h1> asd </h1>

------------------------------------
const Card =({children})=>{         ✏️=> props as children de-structure
return (
<div>{children}        ✏️  => props as children will return / render  whatever lines enclosed between <cadrd> from App component
)
}
export default card          ✏️  =>  <h1> asd </h1>
==================================================================================================================================
✨ #### Props (property)   As Functions ✨ 



const MyButton =(props)=>{         ✏️=> MyButton component
return (
<div>{props.children}          ✏️  => props as children will return / render  whatever lines enclosed between <cadrd> from App component

<button onClick={props.prphandleClick}> {props.test} </button> ✏️=> prop name from app component

<div>
)
}
export default MyButton
-----------------------------------------

Use In App Component Change 

function App (){										✏️=> App component
const [count,setCount] = useState (0)					✏️=> use state to store count

function handleClick()									✏️=> we will send this function  in prop
{
setCount(count+1);

} 

return (<div> 
<MyButton prphandleClick = { handleClick}  text ="click me "> <h1>{count}</h1>	<MyButton>  ✏️=> we will send this function  in prop
</div>)
}

==================================================================================================================================
✨ #### Props  State Lifting in React  (child to parent )

import Card from './components/Card'

function App() {
//create state
//manage state
//change state
//sabhi child me state ko sync karwadunga
const [name, setName] = useState('');

return (
<div>
<Card title="Card1" name={name} setName={setName}/>
<Card title="Card2"-name={name} setName={setName}/>
{/* <p>I am inside Parent Component and Value of name is {name}</p>
*/}
</div
)

-------------------------------------------------------------
import React from 'react'

const Card = (props) => {
return (
<div>
<input type='text' onChange={(e)=> props.setName(e.target.value)}/>
<p>Name state variable ki value inside [props. title) : {props.name}</
p>
</div>

export default Card
-------------------------------------------------------------
==================================================================================================================================
✨ #### Conditional Rendering in React

import { useState } from 'react'
import './App.css'
import LogoutBtn from './componerits/LogoutBtn';
import LoginBtn from './components/LoginBtn';

function App() {
const[isLoggedIn, setLoggedIn] = useState(false);

if(isLoggedIn) {
return (
<LogoutBtn/>

else {
return. (
<LoginBtn />


-------------------------------------------------------------
// turnary operator
function App() {
const[isLoggedIn, setLoggedIn] = useState(false);

return
<div>
{ïsLoggedIn ? <LogoutBtn/> : <LoginBtn />}
</div>
-------------------------------------------------------------
// logical operator
function App() {
const[isLoggedIn, setLoggedIn] = useState(true);

return (
<div>
<h1> Welcome Everyone to Codehelp Web dev course</h1>
<div>
{isLoggedIn && <LogoutBtn />}
</div>
</div>
-------------------------------------------------------------
//early return

function App() {
const[isLoggedIn, setLoggedIn] = useState(false);

if(!isLoggedIn) {
return (
<LoginBtn />

)

return (
<div>
<h1> Welcome Everyone to Codehelp Web dev course</h1>
<div>
{isLoggedIn && <LogoutBtn />}
</div>
</div>

)
-------------------------------------------------------------

==================================================================================================================================
export default App
### questions 
.jxs ?


prop, state and hook,memo ?
==================================================================================================================================
### comment

 {/* This is a comment in React */}
 
 // Types of comment  support in  react ****************************************************//
// ConditionalRendering.jsx
/* Hello component  Start */
{/* This is only work in component  block in React */}
----------------------------------------------------------------

### fragment
<></>
----------------------------------------------------------------

const {abcd}= value || {};  value or default , in this case empty object is defaut 

e.preventDefault
==================================================================================================================================
### inline style
 <h3 style={{ color: "red" }}>
----------------------------------------------------------------
<comp name >.module.css
==================================================================================================================================
### take away
1. componet name start with capital letter, componenet return JSX

2. Importing and Exporting Components
default export
multiple export
named export

3.prop = property
prop are immutable
component will accept props
prop is a js object datatype
props are readonly you can not modify  in between passing 
used for passing data from parent component to child component


Passing PROPS as Children and Functions


==================================================================================================================================
### JSON.stringify(props)  , prop is a object
console.log(JSON.stringify(props));

==================================================================================================================================
 <h1>{`Hello ${user}!`}</h1>
   alert(`Name: ${inputRef.current.value}`);
==================================================================================================================================
### Controlled Component
a component Control  <form> input fields with states 

uncontrolled >> use ref >> using selector >> directly dom  referance
==================================================================================================================================
### hook
hook's are reguler functions but these function only called by react component (alwayes place inside of component)

useState
useDispatch
useSelector
useparams
useNavigate/usedLocation
useref
forward Ref>> depricated from vesion 19
useformStstus hoo =>
useactionstate
==================================================================================================================================
next js
router.push ()=> this will create entry in history
router.replace ()=> this will not  create entry in history  broser back button will not work
router.reload()  => this will reload page


incremental site genaration  (isg)


import {link} from "next/Link"
import {link} from "next/Link"

SWR : stale while revalidating  =>>hook develop by next team 
npm install swr


export get serverside prop

==================================================================================================================================
<React.StrictMode>
==================================================================================================================================
Redux => use latest version redux tool kit
run in terminal => npm install  redux react-redux  => install redux

1]create ,setup redux store  and configure store 
2] wrap application (<app>) with provider 
3]create slice
4] register reducer in store 
4] use selector to get state in App App.jsx and import actions
3]dispatch action to changes state  usedispatch() in App.jsx
create slice

Terms : action ,reducer,slice,store,state
==================================================================================================================================
==================================================================================
✨  Event Handling in React 
https://18.react.dev/learn/adding-interactivity
--------------------------------------
import './App.css'

function App() {

function handleClick()
alert("I am Clicked");

return (
<div>
<button onClick={handleClick}>
Click me
</button>
</div>

)

export default App
--------------------------------------
return (
<div>
<button onClick={()=>{ alert("I got.CLicked") }}>
Click me
</button>
</div>
--------------------------------------
function handleMouseOver() {
alert("Para k upar mouse lekar aaye ho")

return (
<div>

<p onMouseOver={handleMouseOver} style={{border:"2h}}>
I am a Para
</p>

<button onClick={handleClick}>
Click me
</button>
</div>
--------------------------------------
function handleInputChange() {
console. log("Input.me.Value change hui-h.");

return (
<div>

<form>
<input type='text' onChange={handleInputChange}/>
</form>
--------------------------------------
function handleInputChange(e) {
//console. log("Input me Value change hui h ");
console. log("Value till now: ", e. target.value);

return (
<div>

<form>
<input type='text' onChange={(e) => handleInputChange(e)}/>
</form>
--------------------------------------
function handleInputChange(e) {
//console. log("Input me Value change hui h ");
console. log("Value till now: ", e. target.value);

return (
<div>

<form>
<input type='text' onChange={handleInputChange}/>
</form>
)
--------------------------------------
function handleSubmit(e) {
e.preventDefault();
//i am writing my custom behaviour down
alert("Form Submit krdu kya ();

return (
<div>

<form onSubmit={handleSubmit}>
<input type='text' onChange={handleInputChange}/>
<button type='submit'>Submit</button>
</form>
)
--------------------------------------
function handleSubmit(e) {
e.preventDefault();
//i am writing my custom behaviour down
alert("Form Submit krdu kya ");

return (
<div>

<button onClick={() => alert("Button click hua h")
Click me
</button>
--------------------------------------
export default function ColorSwitch({
onChangeColor

return (
<button onClick={e => {
e.stopPropagation();
onChangeColor();

Change color
</button>
};
}
--------------------------------------

==================================================================================
==================================================================================================================================
==================================================================================
✨  useEffect HOOK in depth in React 
https://react.dev/reference/react/useEffect
----------------------------------------------------------------------------
import './App.css'
import { useEffect } from 'react'

function App() {

//first -> side-effect function
//second -> clean-up funtion
//third -> comma separated dep list

useEffect(() =>
first

return () => {
second

[çount])

return (
<div>
Hello Jee
</div>

export default App
----------------------------------------------------------------------------
//first -> side-effect function
//second -> clean-up funtion
//third -> comma separated dep list

//variation:1
//runs on every render
useEffect(() => {
alert("I will run on each render")
})
----------------------------------------------------------------------------
function App() {
const [count, setCount] = useState(0);
//first -> side-effect function
//second -> clean-up funtion
//third -> comma separated dep list

//variation:1
//runs on every render
useEffect(() .= >{
alert("I.will.run.on-each.render")
})

function handleClick() {
setCount(count+1);

return (
<div>
<button onClick={handleClick}>
Click me
</button>
<br/>
Count is: {count}
</div>

export default App
----------------------------------------------------------------------------
//variation: 2
//that runs on ony first render
useEffect(() => {
alert("I will run on only 1st
render");
7, [])   // empty array
----------------------------------------------------------------------------
//variation: 3
useEffect(() =>{
alert("I.will.run every time when
count is updated")
 }, [count])             //=> if we update count  side effect will execute
----------------------------------------------------------------------------
//variation: 4
//multiple dependencies
useEffect(() => {
alert("I will run every time when
count/total is updated")
}, [count, total])
----------------------------------------------------------------------------
//variation: 5
//iss baarlet's add a cleanup function
useEffect(() => {
alert("Count is updated")

return () => <
alert("count is unmounted form UI") ;

}, [count] )
----------------------------------------------------------------------------
case 1
import React, { useState, useEffect } from
'react';

function LoggerComponent() {
const [count, setCount] = useState(0);

useEffect(()=>{
console. log('Component. rendered or count
changed: ', count);
});
//runs on every render

return (
<div>
<h1>Count: {count}</h1>
<button onClick={() => setCount(count + 1)}
>Increment</button>
</div>

export default LoggerComponent
----------------------------------------------------------------------------
import React, { useState, useEffect } from
'react';

function TimerComponent()
const [seconds, setSeconds] = useState(0);

useEffect(() => {
const intervalId = setInterval(() => {
setSeconds (prevSeconds => prevSeconds + 1);
}, 1000);

return () => {
clearInterval(intervalId);

}, []);
//it will run only on first render

return (
<div>
<h1>Seconds: {seconds}</h1>
</div>

};

);

export default TimerComponent
----------------------------------------------------------------------------
function DataFetcher() {
const [data, setData] = useState([]);
const [loading, setLoading] = useState(true);

useEffect(() => {
fetch('https://jsonplaceholder.typicode.com/
posts' )
.then (response => response.json() )
. then (data =>
setData(data);
setLoading(false);

}, []);

return (
<div>
{loading ? (
<h1>Loading ...< /h1>
) : (
<ul>
{data.map (post => (
<li key={post.id}>{post.title}</li>

</ul>

</div>
);}
----------------------------------------------------------------------------
import React, { useState, useEffect } from 'react';

function ResizeComponent() {
const [windowWidth, setWindowWidth] = useState(window.innerWidth);

useEffect(() => {
const handleResize = () => setWindowWidth(window.innerWidth);

window.addEventListener('resize', handleResize);

return () => {
window. removeEventListener('resize', handleResize);

}, []);
//it willl run only on first render

return
<div>
<h1>Window width: {windowWidth}px</h1>
</div>

) ;

export default ResizeComponent
---------------------------------------------------------------------------
import React, { useState, useEffect } from 'react';

function MultiEffectComponent() {
const [count, setCount] = useState(0);
const [seconds, setSeconds] = useState(0);

useEffect(() => {
console. log('Count changed: ', count);
}, [count]);
//side-effect logic will run only when count is changed

useEffect(() => {
const intervalId = setInterval(() => {
console. log("SetInterval Started")
setSeconds(prevSeconds => prevSeconds + 1);
}, 1000);

return () => clearInterval(intervalId);
}, []);
//it will run only on first render

return
<div>
<h1>Count: {count}</h1>
<button onClick={() => setCount(count + 1)}>Increment Count</
button>
<h2>Seconds: {seconds}</h2>
</div>

);}
==================================================================================
✨ useContext Hook   // avoid prop drelling 

==================================================================================================================================
create contex (parent)
provider  (parent)
consume contex (child>
------------------------------------------------------------------------------
import { createContext, useState } from 'react'
import './App.css'
import ChildA from './components/ChildA';

//step1: create Context
const UserContext = createContext();
//step2: wrap all the child inside a provider
//step3: pass value
//step4: consumer .k andar jaake consume karlo

function App() {
const [user, setUser] = useState({name:"Love"});
return (

<UserContext.Provider value={user}>
<ChildA />
</UserContext.Provider>
</>

export default App
export {UserContext}  //=> export contex
------------------------------------------------------------------------------
import React, { useContext } from 'react'
import { UserContext } from ' .. /App'

const ChildC = () => {
const user = useContext(UserContext);
return (
<div>
{user. name}
</div>

)

export default ChildC
------------------------------------------------------------------------------

==================================================================================================================================
const ThemeContext = createContext();
I

function App()
// const [user, setUser] = useState({name:"Love"});
const [theme, setTheme] = useState('light');

return (

<ThemeContext.Provider value={{theme, setTheme}}>
<div id='container' style={{backgroundColor:theme === 'light'?
"beige":"black"}}>
<ChildA />
</div>

</ThemeContext.Provider>
------------------------------------------------------------------------------
const ChildC = () => {
const user = useContext(UserContext);
const {theme, setTheme} = useContext (ThemeContext);
function toggleTheme()
if(theme === 'light' )
setTheme ('dark')
else
setTheme('light')

return (
<div>
<button onClick={toggleTheme}>
Change Theme
</button>
</div>

)

export default ChildC
==================================================================================================================================
==================================================================================================================================
https://reactrouter.com/start/data/routing
✨ Routing in React ✨ 
------------------------------------------------------------------------------
import React from 'react'
import { useNavigate } from 'react-router-dom'

const Home = () => {
const navigate = useNavigate() ;
function handleClick()
navigate('/about');

return (
<div>
Home Page
<button onClick={handleClick}>
Move to ABout Page
</button>
</div>

)

export default Home
------------------------------------------------------------------------------
//Nested routung // child
const router = createBrowserRouter(

path:"/dashboard",
element:
<div>

<Navbar/>
<Dashboard/>
</div>,
children: [

path: '/courses',
element:

path: 'mock-tests',
element :

path: '/reports',
element :

]

}
==================================================================================================================================
✨ React Hook Form ✨
external librery
form hook : https://www.react-hook-form.com/
==================================================================================================================================

==================================================================================================================================

==================================================================================================================================
✨ When to use "useRef" React Hook ✨ 

https://18.react.dev/reference/react/useRef
------------------------------------------------------------------------------
1]keep value persist in between re-render
2] we can directly aceess dom element using useRef
------------------------------------------------------------------------------
import { useState, useEffect, useRef } from 'react'
import './App. css'

function App() {
const [count, setCount] = useState(0);
let val = useRef(0);				✏️ 
let btnRef = useRef();				✏️

function handleIncrement() {
val.current = val.current + 1;
console. log("Value of val: ", val. current)
setCount(count +1);

//it runs on every render
useEffect(() => {
console. log("main ferse render hogya hu")

return (
<div>

<button 
ref={btnRef)						✏️ 
onClick={handleIncrement}>			✏️
Increment
</button>
<br/>
Increment
</button>
<br/>

<div>
Count: {count}
</div>
</div>
------------------------------------------------------------------------------
function App() {
function handleIncrement() {
console. log("Value of val: ", val.current);  ✏️ IT HAVE CURRENT METHOD
setCount(count +1);

//it runs on every render
useEffect(() => {
console. log("main ferse render hogya hu")

function changeColor() {
btnRef.current.style.backgroundColor = "red";  ✏️ chainging dom color

<br/>

return (
<div>

<button
ref={btnRef}
onClick={handleIncrement}>
Increment
</button>
<br/>

<button onClick={changeColor}>
Change Color of 1st Button
</button>

<br/>
------------------------------------------------------------------------------
function App() {
// btnRef.current.style.backgroundColor = "red";

const [time, setTime] = useState(0);

let timerRef = useRef(null);

function startTimer() {
timerRef.current = setInterval( () => {
setTime(time+1)
}, 1000);

function stopTimer() {
clearInterval(timerRef.current);
timerRef.current = null;

function resetTimer()
I

return (
<div>
<h1>StopWatch: {time} seconds</h1>
<button onClick={startTimer}>
Start
</button>
<br/> <br/>

<button onClick={stopTimer}>
Stop
</button>
<br/> <br/>

<button onClick={resetTimer}>
Reset
</button>
------------------------------------------------------------------------------

==================================================================================================================================
✨ #### useMemo React Hook  ✨  memorization

https://18.react.dev/reference/react/useMemo
------------------------------------------------------------------------------


import { useState, useMemo } from 'react'
import './App.css'

function App() {
const [count, setCount] = useState(0);
const [input, setInput] = useState(0);

function expensiveTask(num) {
console. log("Inside Expensive Task");
for(let i=0; i <= 1000000000; i++) {}
return num*2;



let doubleValue = useMemo(() => expensiveTask(input), [input] );

return (
<div>
<button onClick={() => setCount(count+1)}>
Increment
</button>

<div>
Count: {count}
</div>

<input
type='number'
placeholder='enter number'
value={input}
onChange={(e) => setInput(e.target.
value)}

/>

<div>
Double: {doubleValue}
</div>
</div>
------------------------------------------------------------------------------

==================================================================================================================================

==================================================================================================================================

==================================================================================================================================

==================================================================================================================================

==================================================================================================================================

==================================================================================================================================

==================================================================================================================================

==================================================================================================================================

==================================================================================================================================

==================================================================================================================================

==================================================================================================================================

==================================================================================================================================

==================================================================================================================================

==================================================================================================================================

==================================================================================================================================

==================================================================================================================================

==================================================================================================================================

==================================================================================================================================
                       ✏️   ☑️ ✍️  ✒️  ✍️ ▶️ 
✨ React Notes ✨ ▶️

https://www.w3schools.com/react/react_components.asp
https://react.dev/learn/installation

✨  Official Doc : 
Learn React https://18.react.dev/learn/sharing-state-between-components
https://react.dev/learn/managing-state
create resct app : https://create-react-app.dev/
form hook : https://www.react-hook-form.com/
nest js replacement : https://remix.run/
redux : https://react-redux.js.org/introduction/getting-started
==================================================================================================================================
### command to create project
npm creteate vite@4.10 
cd foodapp
npm install
npm run dev

#### command  to run project
npm run dev
--------------------------------------------------
 const data = JSON.stringify()
==================================================================================================================================
class based componant. function based componant
==================================================================================================================================
<React.StrictMode> => used for debugging in dev mode. on production it should be remove
==================================================================================================================================
we can write javascript code in between {}
==================================================================================================================================
... spread operator
    const originalArray = [1, 2, 3];
    const copiedArray = [...originalArray]; 
==================================================================================================================================
In react use camel for event 
onClick =>React  => onClick{functionName} => onlu use functionName dont use (). if we use () it will executed even before click
onclick => javascript
onClick{()=>functionName()} => with callback it will not executed automatic
==================================================================================================================================
<input
type="text"
onChange={(e) => setAmount(e.target.value)}     ✏️ setting input value
value={amount}
name=""
id=""
==================================================================================================================================
className  => camel case provided by react

# inline CSS Stylesheets To Style Component

const header = { color: "blue", fontSize: "140px" };
export default function InlineComponent()
(
<div>
<h1 style={header}>Inline Component</h1>
</div>

return

) ;
----------------------------------------------------------------
CSS Stylesheets To Style Components

----------------------------------------------------------------
# CSS Modules For Styling

import " .. /css/style.css";
export default function InlineComponent() {
return (
<div>
h1 className="inline-header"   =>  inline-header class name defined in css file style.css
</div>
);

Inline Component</h1>

}

----------------------------------------------
import styles from "./inlinecomponent.module.css";  => styles is variable name  this file created for each componant
export default function InlineComponent() {
return
Ediva
<h1 className={styles.header}>Inline Component</h1>  => header is calss name
</div>
) ;

----------------------------------------------

==================================================================================================================================
event



const handleButtonClick = (event) = {
console.log(event);
console.log(event.target);
console.log(event.type); // "click"
alert("Hey I am onClick Event");
};
------------------
https://github.com/thapatechnical/react-19-series-thapa-technical/blob/master/src/components/EventHandling.jsx
{/* // ? Function Components with Named Functions */
/* Remember how we haven't called this function, if you call this
function here then it will run without even clicking. You just need
to pass reference and not call here. */}
<button onClick={handleButtonClick}>click Me</button>
<br
<button onClick={() = handleButtonClick(event)}>click Me 2 </button>

----------------------------------------
{/* /* //? Inline Event Handlers} */}
<button onClick={(event) => console.log(event)}>Inline Function</button>
-------------------------------------
{/* //? Function Components with Inline Arrow Functions */}
<button onClick={() => alert("Hey I am inline evnt function")}>
w

Inline Arr fun
/button>
--------------------------------------------
{/* {/* //? Passing Arguments to Event Handlers } */}
{/* <button onClick={handleWelcomeUser("vinod")}>click Me</button> */}
<button onClick={() =handleWelcomeUser("vinod")}>click Me</button>
--------------------------------------------

const handleWelcomeUser =
console. log( Hey ${user}, Welcome );

(

user) = {

};

==================================================================================================================================
Passing Events as Props in React | Control Parent Function Using Child Component

onClickCapture
stopPropagation

https://github.com/thapatechnical/react-19-series-thapa-technical/blob/master/src/components/EventProps.jsx
------------------------
==================================================================================================================================
Syntax of the useEffect hook

useEffect(() => {
function demo() {
console. log("Demo function executed"

demo ()
}, [])

-----------------------------------------------------
export default function Search() {
const [query, setQuery] = useState("pizza")
// Syntax of the useEffect hook
useEffect(() => {
async function fetchFood()
const res = await fetch('${URL}?query=${query}&apiKey=${API_KEY}');
const data = await res. json()
console. log (data)

fetchFood()
}, [query] )     => in depandacy we have added query , if any thing change in query thee it again execute api call
return

(
==================================================================================================================================
##  useReducer =>  have state and action that we want to dispatch  and reducer function(3 trpes)

const [state_var, dispatch_action] = useReducer(reducer_func, 0);  => i si sinitial value

----
// reducer  function
function reducer_func(state, action) {
if (action. type == "increment") {
return state + action.payload;
}
----
< button onClick={ ()=>dispatch_action((type:"increment", payload: 1})}>Increment couny>/button>   => in call back function  have 2 argument  type and payload(data)

----
---------------------------------------------------------------
##  Using Object As State In useReducer

import { useReducer, useState } from "react";

function App() {
const [state, dispatch] = useReducer(reducer, { count: 0 });
function reducer(state, action) {
if (action.type == "increment") {
return { ... state, count: state. count + action. payload }; // state + action.payload;
}
if (action. type == "decrement") {
return { ... state, count: state. count - action. payload };
}
return (
<div>
{state. count}
<button onClick={() => dispatch({ type: "increment", payload: 1 }) }>
Increment count
</button>
<button onClick={() => dispatch({ type: "decrement", payload: 1}) }>
Decrement count
</button>
</div>
}
---------------------------------------------------------------
## Using Complex Object As State In useReducer

https://youtu.be/kFe4h4HHpbA?list=PLSsAz5wf2lkK_ekd0J__44KG6QoXetZza


=================================================================================================================================
## React Router (Creating Routes)

npm install react-router-dom
npm install react-router-dom@6 install version 6


----------------------------------------------------
import { BrowserRouter, Routes, Route } from "react-router-dom"; ✏️=> import
import Homepage from "./pages/Homepage";
import Dashboard from "./pages/Dashboard";
import PageNotFound from "./pages/PageNotFound";

function App() {
return(
<BrowserRouter>
<Routes>
<Route path="/" element={<Homepage />} />                          ✏️=> Homepage is componant
<Route path="/dashboard" element={<Dashboard />} />                ✏️=> Dashboard is componant
<Route path="*" element={<PageNotFound/>} />
</Routes>
</BrowserRouter>
);
---------------------------------------------------------
https://youtu.be/gBH34hZdjns?list=PLSsAz5wf2lkK_ekd0J__44KG6QoXetZza
React Router ## Link Component In React
import { Link } from "react-router-dom";  ✏️=> import
export default function Homepage() {
return (
<div>
This is a homepage
<Link to="/dashboard" Dashboard</Link>  ✏️=> /dashboard is componant
</div>
);
}
---------------------------------------------------------
React Router ##  Nesting Routes  ✏️=> import

import Dashboard from "./pages/Dashboard";
import PageNotFound from "./pages/PageNotFound";
import Nav from "./Nav";
import Profile from "./pages/Profile";
import Settings from "./pages/Settings";

function App() {
return (

<BrowserRouter>
<Nav />

<Routes>
<Route path="/" element={<Homepage />} />
<Route path="/products/: id element={<Products />}/>
<Route path="/dashboard" element={<Dashboard >}>
	<Route path="profile" element={<Profile />} />
	<Route path="settings" element={<Settings />} />
</Route>
<Route path="*" element={<PageNotFound />} />
</Routes>
</BrowserRouter>
);
-----------------

import { Link, Outlet } from "react-router-dom";

export default function Dashboard() {
return (
<div>
This is a dashboard
<Outlet>  ✏️=> use this
</div>
);
}
---------------------------------------------------------
<Route path="/" element={<Homepage />} />
Route path="/products/: id element={<Products />}/>
--------
return <div>Products List

import { useParams } from "react-router-dom";

export default function Products() {
const { id } = useParams ();
return <div> my product {id} </div>


---------------------------------------------------------
React Router ## progrmatic by code useNavigate Hook In React

import { Link, useNavigate } from "react-router-dom";
export default function Homepage() {
const navigate = useNavigate();
function handleClick() {
navigate("/dashboard/profile");
}
return(
<div>
This is a homepaget
<button onClick={handleClick}>Go to profile page</button>
</div>
);
}

---------------------------------------------------------
import { useState } from "react";
import { Link, useNavigate } from "react-router-dom";
export default function Homepage() {
const [username, setUsername] = useState("");
const navigate = useNavigate();
function handleClick() {
navigate("/dashboard/profile",
}
return (
<div>
This is a homepage
<input
type="text"
value={username}
onChange={(e) => setUsername(e.target.value)}
/>
<button onClick={handleClick}>Go to profile page</button>
</div>

state: { username } }) ;

) ;
}
---------
import { useLocation } from "react-router-dom";

export default function Profile() {
const location = useLocation();
const { username } = location. state | | {};
return <div>Profile for

{username}</div>;}

=================================================================================================================================

=================================================================================================================================

=================================================================================================================================

=================================================================================================================================

=================================================================================================================================

=================================================================================================================================


cons name = "your name";
numRange = [1, 4, 7];

//object
const person = {
name: "Rob",
message: "Hi there!",
emoji: "@",
seatNumbers: [1, 4, 7],
};

return (
<div>
<h2>Name: {name} </h2>
<h3>Rating: {5 / 3.2} </h3>
<p>Sumamry: {summary} </p>
<p>Genre: {returnGenre ()} </p> calling function;
<h2>Name: {name}, seatNumbers={seatNumbers} ,person={person}</h2> // sending array and object as props
</div>
)

==================================================================================================================================
Rendering Arrays Or Lists In React

export default function Fruits() {
const fruits = ["Apple", "Mango", "Banana", "Orange"]
return (
<div>

<ul>
{fruits.map((fruit) => (
<li key={fruit}>{fruit}</li>           //key is acts like uniq index 

</ul>
</div>

);
-------------------------------------
Rendering Array Of Objects In React

export default function Fruits() {
//const fruits = ["Apple", "Mango", "Banana", "Orange", "Pineapple"];
const fruits = [
[
{ name: Apple", price: 10, emoji: "" },
{ name: "Mango", price: 7, emoji: "Q" },
{ name: "Banana", price: 2, emoji: "" },
{ name: "Orange", price: 5, emoji: "é" },
{ name: "Pineapple", price: 8, emoji: ">" },
];


<ul>
{ fuits.map((fruit) =>
li key={fruit.name}
{" "}
{fruit.emoji} {fruit.name} ${fruit.price}
</li>

</ul>
-------------------------------------
Rendering Components Inside A Loop
https://www.youtube.com/watch?v=8AY4siDB3ow&list=PLSsAz5wf2lkK_ekd0J__44KG6QoXetZza&index=15&pp=iAQB

==================================================================================================================================


Conditional Rendering Using Element Variables

export default function ConditionalComponent()
let message;
tonst display = false;
if (display) {
message = <h1>This is message 1</h1>;
} else {
message = <h1>This is message 2</h1>;

return message;
---------------------------------
Using Ternary Operators In React
export default function ConditionalComponent()
const display = true;
return display ? <h1>Message 1</h1> : <h1>Message 2</h1>;

---------------------------------
export default function ConditionalComponent()
const display = false;
return display ? <Welcome /> : <Code />;

---------------------------------
{/* {emoji} {name} {price} */}
{price>5 ? <h3>{emoji} {name} {price}</h3>:
/li>

-----------------------------------
export default function Fruit({ name, price, emoji, soldout
return

<li>
{emoji} {name} {price} {soldout ? "soldOut" : ""}
</li>
</>

( 
==================================================================================================================================
Props v/s State
. Props are passed to the component.
. State is contained inside the component.
. Props are immutable.
· State can be changed.
. Props are like parameters passed to a function.
. State is like a variable declared in function body.


----------------------------------------------------------------------------------

import { useState } from "react";   => import this 

export default function Counter() {
const [count, setCount] = useState(0);  => use setCount function to  set value in count variable
function handleClick()
setCount(count + 1); => use setCount function to  set value in count variable

(
<div>
<h1> Count value is: {count}</h1>
<button onClick={handleClick}>Increment</button>
</div>
--------------------------------------------------------------------------------
Creating Multiple States In React

import { useState } from "react";

export default function Counter() {
const [count, setCount] = useState(0);             => multiple state
const [incrementBy, setIncrementBy] = useState(1);  => multiple state
function increment() {
setCount (count + incrementBy) ;         =>both state variabe used 

function decrement() {
setCount(count - incrementBy);

function increaseIncrement() {
setIncrementBv(incrementBv + 1):
}

<div>
<h1> Count value is: {count}</h1>
<button onClick={increment}>Increment</button>
<button onClick={decrement}>Decrement</button>

<h1 We are incrementing the value by: {incrementBy}</h1>
<betton onClick={increaseIncrement}>Increase Increment</button>
</div>
==================================================================================================================================
Handling Input Fields In React

export default function Form() {
const [name, setName] = useState("Rob");
function handleChange() {
console. log ("Change occured')
}

return(
<div>

<form>   => use form tag
<input onChange={handleChange} type="text" value={name} />
</form>
</form>
</div>

)
};
--------------------------------------------------------------------------
export default function Form( )
const [name, setName] = useState("");

(
<div>
<form>
<input
onChange={(e) => setName(e.target.value)} => event value capture
type="text"
value={name}

</form>
</div>
--------------------------------------------------------------------------



==================================================================================================================================

==================================================================================================================================


==================================================================================================================================
ChatGPT.com switched from NextJS to Remix
? create your own hook , custome hook ?
? Redux Thunk
? State Lifting in React ?
? e.stopPropogation  => stop event bubbling 
#alwayes check import and export
==================================================================================================================================
Query parameter  =>   www.sj.com/employee?id= nitin
route parameter  =>   www.sj.com/ employee/2
=========================================================================
className  => use for css  (camel case)
props      => propeties  or html element propeties
onClick    => event  (camel case)	
.map()     => like for loop
htmlFor    =>
e,preventDefault =>
<React.StrictMode>   => use application run in dev mode , cause to double rendaring , Remove on Prod 
useState             => hook  to change initial value  like input  
------------------------------------------------------------------
Props are immutable 

Destructuring Props => props assinged to variables
1]
function Hello(props) {  // as prop key word
console. log(props);
const { name, message } = props;
return (
<div>

{message} {name}
</h1>
</div>

export default Hello;

-------------------------
2] directly destructure 
function Hello({ name, message }) { // directly destructure  here.  remove prop keyword and in curly brases give varibles name
return

<div>

<h1>
{message} {name}
</h1>
</div>

) ;

export default Hello;

------------------------------------------------------------------
<h1>{`Hello ${user}!`}</h1>  => variable subcription  (tild use here)

...Values  => ... used for creating copy 

e.target.value  => get any html element value  . like input ,button etc


useEffect
useParams    => read query string parameter from url/route path in componenetnt
useRef
useReduces  => use with dispatch , like use state , define initial state
createContex () =>  create contex and then ,create provider component and register component , and then use provider in Application , consume contex in component
Redux           => It Uses a centralised store, actions and reducers to manage state change predictibliy
usedispatch()
useselector ()
useDispatch()
useLayoutEffect()
useNavigate


useCallback
useTransition
useLayoutEffect
useMemo // useEffect
useRef
useTheam
useMediaQuery
useSession
usePathName
children
preventdefault

==================================================================================================================================
✨ react js with vite
==================================================================================================================================
what is vite > install vite
install node and NPM 
 check node version > node -v
 npm version        > npm -v
 install  vs code
npm create vite

go to folder and 
and npm install

npm run dev (for vite)
npm start (for non vite)
==================================================================================================================================
  cd my-reacy-js-proj
  npm install
  npm run dev
  

==================================================================================================================================
type script with +Swc (Speedy Web Compiler)

Rust-based platform for the Web

SWC is an extensible Rust-based platform for the next generation of fast developer tools. It's used by tools like Next.js, Parcel, and Deno, as well as companies like Vercel, ByteDance, Tencent, Shopify, Trip.com, and more.

SWC can be used for both compilation and bundling. For compilation, it takes JavaScript / TypeScript files using modern JavaScript features and outputs valid code that is supported by all major browsers.
==================================================================================================================================
https://vite.dev/guide/
==================================================================================================================================
 https://www.w3schools.com/react/react_components.asp
---------------------------------------------------------------------------------
✨ ####  component is a java script function  which return jsx                         
----
1]
const myName ="nitin";
let myNum = 12;
function Car() {       ✏️=>component name alwayes in cap's

  {/* we can add more JS logic here */}  
  var abc ="qwe";
	
  return (
  <div>
  <h2>Hi, I am a Car! {myName}</h2>  ✏️=> multiple element should be include in div or use fragment (<></>)tags insted of div
  <h2>Hi, check number ! {(myNum)> 12 ? 'number is big' : 'number is small'}</h2>
  </div>
  );  ✏️=>jsx we can write JS or access  variables or js function 	in {}  , component name alwayes in cap's
}
export default Car ; ✏️=> we export this to use in main component
---------------------------------------------------------------------------------
2] use component inside your main component file  i.e App component.

import car from "./component/car";  ✏️=> component name with file path 

function App() {

  {/* we can add more logic here */}
	
  return (
  <div className ="App">
	<Car></Car>            ✏️=> We use Car component Here
  </div>
  
  )  ✏️=> jsx
}
==================================================================================================================================
✨ #### Props (property)


-------------------------------------
const Card =(props)=>{         ✏️=> We use structure props
return (
<div>{props.myName}
)
}
export default card
-------------------------------------
const Card =({myName})=>{           ✏️=> We use de-structure props with {} breses  dont requird props.<property>, directly can access 
return (
<div>{myName}
)
}
export default card
---------------------------------

Use In App Component

function App (){
return (<div> 
<Card Name="Nitin#"> <h1> asd </h1> </Card>  ✏️=> Passing "Nitin#" in Name property to Card cpmponent
<Card children ="Hello Sachin"> hello nitin</Card>
</div>)
}
---------------------------------
const Card =(props)=>{         ✏️=> props as children
return (
<div>{props.children} </div>       ✏️  => props as children will return / render  whatever lines enclosed between <cadrd> from App component
)
}
export default card          ✏️  =>  <h1> asd </h1>

------------------------------------
const Card =({children})=>{         ✏️=> props as children de-structure
return (
<div>{children}        ✏️  => props as children will return / render  whatever lines enclosed between <cadrd> from App component
)
}
export default card          ✏️  =>  <h1> asd </h1>
==================================================================================================================================
✨ #### Props (property)   As Functions ✨ 



const MyButton =(props)=>{         ✏️=> MyButton component
return (
<div>{props.children}          ✏️  => props as children will return / render  whatever lines enclosed between <cadrd> from App component

<button onClick={props.prphandleClick}> {props.test} </button> ✏️=> prop name from app component

<div>
)
}
export default MyButton
-----------------------------------------

Use In App Component Change 

function App (){										✏️=> App component
const [count,setCount] = useState (0)					✏️=> use state to store count

function handleClick()									✏️=> we will send this function  in prop
{
setCount(count+1);

} 

return (<div> 
<MyButton prphandleClick = { handleClick}  text ="click me "> <h1>{count}</h1>	<MyButton>  ✏️=> we will send this function  in prop
</div>)
}
==================================================================================================================================
✨ #### Conditional rendaring 
Function App()
const [isLoggedIn, setIsLoggedIn] = useState(false)

return (
<div style={{ padding: "2rem" }}>
<h1>Welcome to chai code</h1>
<button onClick={() => setIsLoggedIn(!isLoggedIn)}
>Toggle login</button>

<div>
<h3>&& operator</h3>
{isLoggedIn && <p>Welcome to chaicode video</p>}   ☑️  use this {! ! isLoggedIn && <p>Welcome to chaicode video</p>}  ▶️  to avoid short condition
</div>
<div>
<h3>Ternary operator</h3>
{isLoggedIn ? <p>Welcome to chaicode video</p>:
"Please login"}
</div>

export default App;

==================================================================================================================================
✨ #### Props  State Lifting in React  (child to parent )

import Card from './components/Card'

function App() {
//create state
//manage state
//change state
//sabhi child me state ko sync karwadunga
const [name, setName] = useState('');

return (
<div>
<Card title="Card1" name={name} setName={setName}/>
<Card title="Card2"-name={name} setName={setName}/>
{/* <p>I am inside Parent Component and Value of name is {name}</p>
*/}
</div
)

-------------------------------------------------------------
import React from 'react'

const Card = (props) => {
return (
<div>
<input type='text' onChange={(e)=> props.setName(e.target.value)}/>
<p>Name state variable ki value inside [props. title) : {props.name}</
p>
</div>

export default Card
-------------------------------------------------------------
==================================================================================================================================
✨ #### Conditional Rendering in React

import { useState } from 'react'
import './App.css'
import LogoutBtn from './componerits/LogoutBtn';
import LoginBtn from './components/LoginBtn';

function App() {
const[isLoggedIn, setLoggedIn] = useState(false);

if(isLoggedIn) {
return (
<LogoutBtn/>

else {
return. (
<LoginBtn />


-------------------------------------------------------------
// turnary operator
function App() {
const[isLoggedIn, setLoggedIn] = useState(false);

return
<div>
{ïsLoggedIn ? <LogoutBtn/> : <LoginBtn />}
</div>
-------------------------------------------------------------
// logical operator
function App() {
const[isLoggedIn, setLoggedIn] = useState(true);

return (
<div>
<h1> Welcome Everyone to Codehelp Web dev course</h1>
<div>
{isLoggedIn && <LogoutBtn />}
</div>
</div>
-------------------------------------------------------------
//early return

function App() {
const[isLoggedIn, setLoggedIn] = useState(false);

if(!isLoggedIn) {
return (
<LoginBtn />

)

return (
<div>
<h1> Welcome Everyone to Codehelp Web dev course</h1>
<div>
{isLoggedIn && <LogoutBtn />}
</div>
</div>

)
-------------------------------------------------------------

==================================================================================================================================
export default App
### questions 
.jxs ?


prop, state and hook,memo ?
==================================================================================================================================
### comment

 {/* This is a comment in React */}
 
 // Types of comment  support in  react ****************************************************//
// ConditionalRendering.jsx
/* Hello component  Start */
{/* This is only work in component  block in React */}
----------------------------------------------------------------

### fragment
<></>
----------------------------------------------------------------

const {abcd}= value || {};  value or default , in this case empty object is defaut 

e.preventDefault
==================================================================================================================================
### inline style
 <h3 style={{ color: "red" }}>
----------------------------------------------------------------
<comp name >.module.css
==================================================================================================================================
### take away
1. componet name start with capital letter, componenet return JSX

2. Importing and Exporting Components
default export
multiple export
named export

3.prop = property
prop are immutable
component will accept props
prop is a js object datatype
props are readonly you can not modify  in between passing 
used for passing data from parent component to child component


Passing PROPS as Children and Functions


==================================================================================================================================
### JSON.stringify(props)  , prop is a object
console.log(JSON.stringify(props));

==================================================================================================================================
 <h1>{`Hello ${user}!`}</h1>
   alert(`Name: ${inputRef.current.value}`);   => ref have current method to acccess value
==================================================================================================================================
### Controlled Component
a component Control  <form> input fields with states 

uncontrolled >> use ref >> using selector >> directly dom  referance
==================================================================================================================================
### hook
hook's are reguler functions but these function only called by react component (alwayes place inside of component)

useState
useDispatch
useSelector
useparams
useNavigate/usedLocation
useref
forward Ref>> depricated from vesion 19
useformStstus hoo =>
useactionstate
==================================================================================================================================
next js
router.push ()=> this will create entry in history
router.replace ()=> this will not  create entry in history  broser back button will not work
router.reload()  => this will reload page


incremental site genaration  (isg)


import {link} from "next/Link"
import {link} from "next/Link"

SWR : stale while revalidating  =>>hook develop by next team 
npm install swr


export get serverside prop

==================================================================================================================================
<React.StrictMode>
==================================================================================================================================
✨ #### Redux
https://redux-toolkit.js.org/introduction/getting-started
https://redux-toolkit.js.org/tutorials/quick-start

✏️ Redux => use latest version redux tool kit
run in terminal => npm install  redux react-redux  => install redux

Core Concepts of Redux
Store - Holds state of your application
Action - Describe the changes in the state of application
Reducer - Actually carries out the state transition depending on the action

Example Book Shop
ShopKeeper (Reducer) <==> Shop (store)<==> Customer (action)

---------------------------------------------------------------------------------
✏️ Rules of Redux

. The state of your application is stored in an object tree within a single store.

{
NumberOfBooks : 10

}

. only way to change the state is to emit an action, an object describing what
happened.

{ Type : "buyBook",payload: "any" }  => Action is a object. playload id optional it could be number or string 

. To specify how the state tree is transformed by actions, we write pure reducer.
---------------------------------------------------------------------------------
✏️ Action in Redux

. Actions are JavaScript object that contains information.
. Actions are the only source of information for the store, It only tells us what has
happened.
. Actions have a type property and it should be defined in string constraint.
. It is compulsory to include the type property in the object.

Syntax:

const Actions = {type: 'buyBook'} // Action is a object
---------------------------------------------------------------------------------
Actions / Action createtor
reduxContainer > JS BookAction.js > [e)
 purchase_book
const purchase_book =()=>{
return {
type : 'buyBook'}}

---------------------------------------------------------------------------------

✏️ Reducers in React, Reducers is a function 

. Reducers decides how the state of application changes depending upon the
action sent to the store.
. Reducers are the function that accepts state and action as parameter and
returns the next state of the application.

(previousState, action) => newState
---------------------------------------------
Reducers in React, Reducers is a function
reduxContainer > JS BookReducer.js > [] default
import {buy_book} from './BookTypes'
const initialState ={
NumberOfBooks : 20

}

const BookReducer = (state= initialState, action)=>{
switch(action.type){
case buy_book: return{
... state, NumberOfBooks :state.initialState -1

default : return state

}

export default BookReducer;

-------------------------------------------------

✏️ Redux Store

. Entire Application contains Single Store.
. It is responsible for holding application state.
. getState() method gives access to state it holds.
· dispatch(action) method allow state to be updated.
. It has subscribe(listener) method as well by which we can register listeners.

This method accept function (listener) as a parameter which execute anytime
when the state in redux store changes.
-----------
 Redux Store
reduxContainer > JS Store.js > 
import {ereateStore} from 'redux';  ☑️ we can use configure store also
import BookReducer from './BookReducer';

const store = createStore(BookReducer);I

export default store;
--------------------------------------------------------------------------
✏️ connect redux store with our application
App.js App
import logo from './logo.svg';
import './App.css';
import { Provider } from 'react-redux';      ☑️  check import 
import store from './reduxContainer/Store';  ☑️

function App() {
return
<Provider store={store}>  ☑️  connecting strote  thorugh props  Wrap In provider tag
<div className="App">
<header className="App-header">
<img src={logo} className="App-logo" alt="logo" />
>

<p>
Edit <code>src/App.js</code> and save to reload.
</p>
<a

className="App-link"
href="https://reactjs.org"
target="_blank"
rel="noopener noreferrer"

Learn React
</a>
</header>
</div>
</Provider>
---------------------------------------------------------------------------------
✏️  reduxp provide by redux
   React Redux + Hooks

React Redux offers set of hooks to - subscribe to redux store and dispatch
actions.

useSelector Hook-

. useSelector is a hook react-redux library provides to get hold of any state that
is maintained in the redux store.

Syntax - const xyz =useSelector(selector: Function, equalityFn ?: Function)

Selector functn accepts the redux state as its argument and return a value.
---------------------------------------
reduxContainer > JS BookContainer.js >
BookContainer

import { useSelector } from 'react-redux'  ☑️

function BookContainer() {
const no0fBooks = useSelector(state => state.NumberOfBooks) ☑️
return (
<>
<div>BookContainer</div>
<h2>No of Books - {} </h2>
</>
import React from 'react'
)

export default BookContainer
---------------------------------------
✏️ redux useDispatch
useDispatch() Hook

. This hook returns a reference to the dispatch function from the Redux store.
You may use it to dispatch actions as needed.

Syntax - const dispatch = useDispatch() ☑️

---------------------------------------
redux useDispatch

reduxContainer > JS BookContainer.js > BookContainer > [e] dispatch
import React from 'react'
import {useDispatch, useSelector } from 'react-redux';  ☑️
import purchase_book from './BookAction';

return

function BookContainer() {
const no0fBooks = useSelector(state => state.NumberOfBooks)
const dispatch= useDispatch()  ☑️ referance 

(

<div>BookContainer</div>
<h2>No of Books - {no0fBooks} </h2>
<button onClick={()=>{dispatch(purchase_book())}}>Buy Book</button>  ☑️ Call Action 


---------------------------------------------------------------------------------
//steps:
// create store
// wrap app component under Provider
// create Slice
// register reducer in store

https://redux-toolkit.js.org/tutorials/quick-start

1]create ,setup redux store  and configure store 
2] wrap application (<app>) with provider 
3]create slice  =>         ☑️ feture initial State initial value +  All  reducer function  present here 
4] register reducer in store 
4] use selector to get state in App App.jsx and import actions
3]dispatch action to changes state  usedispatch() in App.jsx
create slice

Terms : action ,
reducer,
slice,=> feture initial State value + reducer function  present here 
store,
state
---------------------------------------------------------------------------------
https://redux-toolkit.js.org/tutorials/quick-start

Slice  ☑️ feture initial State initial value +  All  reducer function  present here 
import { createSlice } from '@reduxjs/toolkit'

export const counterSlice = createSlice({
name: 'counter',
initialState: {             ☑️ feture initial State initial value 
value: 0
                                
initialState: {             ☑️  All  reducer function  present here 
reducers: {                       
increment: state => {
state.value += 1

decrement: state => {         ☑️  All  reducer function  present here 
state.value -= 1

incrementByAmount: (state, action) => {
state.value += action.payload

// Action creators are generated for each case reducer
function
export const { increment, decrement, incrementByAmount } =
counterSlice.actions

export default counterSlice. reducer
---------------------------------------------------------------------------------
## register slice with store

edux-toolkit > src > redux > JS store.js > 
import { configureStore } from '@reduxjs/toolkit'
import counterReducer from ' .. /features/counter/counterSlice'

export const store = configureStore({
reducer: {
counter: counterReducer
},})
----------------------------------------------------------------------------------
## Access redus store value thrugh useSelector

edux-toolkit > src > JS App.jsx > App

import { useDispatch, useSelector } from 'react-redux'
import './App.css'
import { decrement, increment } from './features/counter/
counterSlice';

function App() {

const count = useSelector((state) => state.counter.value);
const dispatch = useDispatch();

function handleIncrementClick() {
dispatch(increment());

function handleDecrementClick() {
dispatch(decrement());

return (
<div className='container'>
<button onClick={handleIncrementClick}> + </button>
<p>Count: {count}</p>
<button onClick={handleDecrementClick}> - </button>
</div>

)

}

export default App

----------------------------------------------------------------------------------
#### Redux Thunk is a middleware library for Redux, a popular state management library for JavaScript
applications. Redux Thunk allows you to write action creators that return functions instead of plain action
objects. These functions can perform asynchronous operations and dispatch actions to update the Redux store.

When using Redux Thunk, your action cmeators can have access to the dispatch method, allowing them to
dispatch multiple actions, including asynchronous ones. This is useful when you need to make API calls,
handle side effects, or delay dispatching an action.

To use Redux Thunk in your Redux application, you need to apply the middleware when creating your Redux
store.
==================================================================================================================================
==================================================================================
✨  Event Handling in React 
https://18.react.dev/learn/adding-interactivity
--------------------------------------
import './App.css'

function App() {

function handleClick()
alert("I am Clicked");

return (
<div>
<button onClick={handleClick}>
Click me
</button>
</div>

)

export default App
--------------------------------------
return (
<div>
<button onClick={()=>{ alert("I got.CLicked") }}>
Click me
</button>
</div>
--------------------------------------
function handleMouseOver() {
alert("Para k upar mouse lekar aaye ho")

return (
<div>

<p onMouseOver={handleMouseOver} style={{border:"2h}}>
I am a Para
</p>

<button onClick={handleClick}>
Click me
</button>
</div>
--------------------------------------
function handleInputChange() {
console. log("Input.me.Value change hui-h.");

return (
<div>

<form>
<input type='text' onChange={handleInputChange}/>
</form>
--------------------------------------
function handleInputChange(e) {
//console. log("Input me Value change hui h ");
console. log("Value till now: ", e. target.value);

return (
<div>

<form>
<input type='text' onChange={(e) => handleInputChange(e)}/>
</form>
--------------------------------------
function handleInputChange(e) {
//console. log("Input me Value change hui h ");
console. log("Value till now: ", e. target.value);

return (
<div>

<form>
<input type='text' onChange={handleInputChange}/>
</form>
)
--------------------------------------
function handleSubmit(e) {
e.preventDefault();
//i am writing my custom behaviour down
alert("Form Submit krdu kya ();

return (
<div>

<form onSubmit={handleSubmit}>
<input type='text' onChange={handleInputChange}/>
<button type='submit'>Submit</button>
</form>
)
--------------------------------------
function handleSubmit(e) {
e.preventDefault();
//i am writing my custom behaviour down
alert("Form Submit krdu kya ");

return (
<div>

<button onClick={() => alert("Button click hua h")
Click me
</button>
--------------------------------------
export default function ColorSwitch({
onChangeColor

return (
<button onClick={e => {
e.stopPropagation();
onChangeColor();

Change color
</button>
};
}
--------------------------------------

==================================================================================
==================================================================================================================================
==================================================================================
✨  useEffect HOOK in depth in React 
https://react.dev/reference/react/useEffect
----------------------------------------------------------------------------
import './App.css'
import { useEffect } from 'react'

function App() {

//first -> side-effect function
//second -> clean-up funtion
//third -> comma separated dep list

useEffect(() =>
first

return () => {
second

[çount])

return (
<div>
Hello Jee
</div>

export default App
----------------------------------------------------------------------------
//first -> side-effect function
//second -> clean-up funtion
//third -> comma separated dep list

//variation:1
//runs on every render
useEffect(() => {
alert("I will run on each render")
})
----------------------------------------------------------------------------
function App() {
const [count, setCount] = useState(0);
//first -> side-effect function
//second -> clean-up funtion
//third -> comma separated dep list

//variation:1
//runs on every render
useEffect(() .= >{
alert("I.will.run.on-each.render")
})

function handleClick() {
setCount(count+1);

return (
<div>
<button onClick={handleClick}>
Click me
</button>
<br/>
Count is: {count}
</div>

export default App
----------------------------------------------------------------------------
//variation: 2
//that runs on ony first render
useEffect(() => {
alert("I will run on only 1st
render");
7, [])   // empty array
----------------------------------------------------------------------------
//variation: 3
useEffect(() =>{
alert("I.will.run every time when
count is updated")
 }, [count])             //=> if we update count  side effect will execute
----------------------------------------------------------------------------
//variation: 4
//multiple dependencies
useEffect(() => {
alert("I will run every time when
count/total is updated")
}, [count, total])
----------------------------------------------------------------------------
//variation: 5
//iss baarlet's add a cleanup function
useEffect(() => {
alert("Count is updated")

return () => <
alert("count is unmounted form UI") ;

}, [count] )
----------------------------------------------------------------------------
case 1
import React, { useState, useEffect } from
'react';

function LoggerComponent() {
const [count, setCount] = useState(0);

useEffect(()=>{
console. log('Component. rendered or count
changed: ', count);
});
//runs on every render

return (
<div>
<h1>Count: {count}</h1>
<button onClick={() => setCount(count + 1)}
>Increment</button>
</div>

export default LoggerComponent
----------------------------------------------------------------------------
import React, { useState, useEffect } from
'react';

function TimerComponent()
const [seconds, setSeconds] = useState(0);

useEffect(() => {
const intervalId = setInterval(() => {
setSeconds (prevSeconds => prevSeconds + 1);
}, 1000);

return () => {
clearInterval(intervalId);

}, []);
//it will run only on first render

return (
<div>
<h1>Seconds: {seconds}</h1>
</div>

};

);

export default TimerComponent
----------------------------------------------------------------------------
function DataFetcher() {
const [data, setData] = useState([]);
const [loading, setLoading] = useState(true);

useEffect(() => {
fetch('https://jsonplaceholder.typicode.com/
posts' )
.then (response => response.json() )
. then (data =>
setData(data);
setLoading(false);

}, []);

return (
<div>
{loading ? (
<h1>Loading ...< /h1>
) : (
<ul>
{data.map (post => (
<li key={post.id}>{post.title}</li>

</ul>

</div>
);}
----------------------------------------------------------------------------
import React, { useState, useEffect } from 'react';

function ResizeComponent() {
const [windowWidth, setWindowWidth] = useState(window.innerWidth);

useEffect(() => {
const handleResize = () => setWindowWidth(window.innerWidth);

window.addEventListener('resize', handleResize);

return () => {
window. removeEventListener('resize', handleResize);

}, []);
//it willl run only on first render

return
<div>
<h1>Window width: {windowWidth}px</h1>
</div>

) ;

export default ResizeComponent
---------------------------------------------------------------------------
import React, { useState, useEffect } from 'react';

function MultiEffectComponent() {
const [count, setCount] = useState(0);
const [seconds, setSeconds] = useState(0);

useEffect(() => {
console. log('Count changed: ', count);
}, [count]);
//side-effect logic will run only when count is changed

useEffect(() => {
const intervalId = setInterval(() => {
console. log("SetInterval Started")
setSeconds(prevSeconds => prevSeconds + 1);
}, 1000);

return () => clearInterval(intervalId);
}, []);
//it will run only on first render

return
<div>
<h1>Count: {count}</h1>
<button onClick={() => setCount(count + 1)}>Increment Count</
button>
<h2>Seconds: {seconds}</h2>
</div>

);}
==================================================================================
✨ useContext Hook Context  // avoid prop drelling
✨ Context API In React ✨
-----------------------------------------------
Steps Involved With Context
. Creating context.
· Providing context.  => wrap child in <ContextName.Provider > tags, // <ContextName.Provider  anyData ="guest" >  sending data also
. Consuming context.  =>
· Updating context.

==================================================================================================================================
create contex (parent)
provider  (parent)
consume contex (child>
------------------------------------------------------------------------------
Creating context.
Providing context
import { createContext, useState } from 'react'
import './App.css'
import ChildA from './components/ChildA';

//step1: create Context
const UserContext = createContext();
//step2: wrap all the child inside a provider
//step3: pass value
//step4: consumer .k andar jaake consume karlo

function App() {
const [user, setUser] = useState({name:"Love"});
return (

<UserContext.Provider value={user}>
<ChildA />
</UserContext.Provider>
</>

export default App
export {UserContext}  //=> export contex
------------------------------------------------------------------------------
Consuming context

import React, { useContext } from 'react'
import { UserContext } from ' .. /App'

const Child = () => {
const user = useContext(UserContext);
return (
<div>
{user. name}
</div>

)

export default Child
------------------------------------------------------------------------------
 ## Updating context.
 
 import { createContext, useState } from "react";
import Checkout from "./Checkout";
export const userContext = createContext();
function App() {
const [user, setUser] = useState("guest");
return (
<div>
<input
type="text"
value={user}
onChange={(e) => setUser(e.target. value)}
/>
<userContext.Provider xalue={{ user }}>
<Checkout />
</userContext.Provider>
</div>

):

export default App;
-----------
src > Checkout.jsx > Checkout > 
import { useContext } from "react";
import { userContext } from "./App";

export default function Checkout() {
const {value} = useContext(userContext);
return <div>Checkout as {value.user}</div>;
==================================================================================================================================
const ThemeContext = createContext();
I

function App()
// const [user, setUser] = useState({name:"Love"});
const [theme, setTheme] = useState('light');

return (

<ThemeContext.Provider value={{theme, setTheme}}>
<div id='container' style={{backgroundColor:theme === 'light'?
"beige":"black"}}>
<ChildA />
</div>

</ThemeContext.Provider>
------------------------------------------------------------------------------
const ChildC = () => {
const user = useContext(UserContext);
const {theme, setTheme} = useContext (ThemeContext);
function toggleTheme()
if(theme === 'light' )
setTheme ('dark')
else
setTheme('light')

return (
<div>
<button onClick={toggleTheme}>
Change Theme
</button>
</div>

)

export default ChildC
==================================================================================================================================
2]  Separating Context Into Its Own File In React
------------------------------------------------------------------------------
src > context >UserContext.jsx > UserProvider
import { createContext } from "react";
import { useState } from "react";
const userContext = createContext();

function UserProvider({ children }) {
const [user, setUser] = useState("guest");
return
<userContext.Provider value={{ user, setUser }}>
{children}
</userContext.Provider>
);

export { UserProvider, userContext };
------------------------------------------------------------------------------
src > App.jsx > App
>src App.jsx > App
import { createContext, useState } from "react";
import Checkout from "./Checkout";
import Login from "./Login";
import { UserProvider } from "./context/UserContext";


function App()

return (
<div>
<UserProvider>
<Login />
<Checkout />
</UserProvider>
</div>

export default App:
==================================================================================================================================
https://reactrouter.com/start/data/routing
✨ Routing in React ✨ 
------------------------------------------------------------------------------
import React from 'react'
import { useNavigate } from 'react-router-dom'

const Home = () => {
const navigate = useNavigate() ;
function handleClick()
navigate('/about');

return (
<div>
Home Page
<button onClick={handleClick}>
Move to ABout Page
</button>
</div>

)

export default Home
------------------------------------------------------------------------------
//Nested routung // child
const router = createBrowserRouter(

path:"/dashboard",
element:
<div>

<Navbar/>
<Dashboard/>
</div>,
children: [

path: '/courses',
element:

path: 'mock-tests',
element :

path: '/reports',
element :

]

}
==================================================================================================================================
✨ React Hook Form ✨
external librery
form hook : https://www.react-hook-form.com/
==================================================================================================================================

==================================================================================================================================

==================================================================================================================================
✨ When to use "useRef" React Hook ✨ 

https://18.react.dev/reference/react/useRef
------------------------------------------------------------------------------
1]keep value persist in between re-render
2] we can directly aceess dom element using useRef
------------------------------------------------------------------------------
import { useState, useEffect, useRef } from 'react'
import './App. css'

function App() {
const [count, setCount] = useState(0);
let val = useRef(0);				✏️ 
let btnRef = useRef();				✏️

function handleIncrement() {
val.current = val.current + 1;
console. log("Value of val: ", val. current)
setCount(count +1);

//it runs on every render
useEffect(() => {
console. log("main ferse render hogya hu")

return (
<div>

<button 
ref={btnRef)						✏️ 
onClick={handleIncrement}>			✏️
Increment
</button>
<br/>
Increment
</button>
<br/>

<div>
Count: {count}
</div>
</div>
------------------------------------------------------------------------------
function App() {
function handleIncrement() {
console. log("Value of val: ", val.current);  ✏️ IT HAVE CURRENT METHOD
setCount(count +1);

//it runs on every render
useEffect(() => {
console. log("main ferse render hogya hu")

function changeColor() {
btnRef.current.style.backgroundColor = "red";  ✏️ chainging dom color

<br/>

return (
<div>

<button
ref={btnRef}
onClick={handleIncrement}>
Increment
</button>
<br/>

<button onClick={changeColor}>
Change Color of 1st Button
</button>

<br/>
------------------------------------------------------------------------------
function App() {
// btnRef.current.style.backgroundColor = "red";

const [time, setTime] = useState(0);

let timerRef = useRef(null);

function startTimer() {
timerRef.current = setInterval( () => {
setTime(time+1)
}, 1000);

function stopTimer() {
clearInterval(timerRef.current);
timerRef.current = null;

function resetTimer()
I

return (
<div>
<h1>StopWatch: {time} seconds</h1>
<button onClick={startTimer}>
Start
</button>
<br/> <br/>

<button onClick={stopTimer}>
Stop
</button>
<br/> <br/>

<button onClick={resetTimer}>
Reset
</button>
------------------------------------------------------------------------------

==================================================================================================================================
✨ #### useMemo React Hook  ✨  memorization

https://18.react.dev/reference/react/useMemo
------------------------------------------------------------------------------


import { useState, useMemo } from 'react'
import './App.css'

function App() {
const [count, setCount] = useState(0);
const [input, setInput] = useState(0);

function expensiveTask(num) {
console. log("Inside Expensive Task");
for(let i=0; i <= 1000000000; i++) {}
return num*2;



let doubleValue = useMemo(() => expensiveTask(input), [input] );

return (
<div>
<button onClick={() => setCount(count+1)}>
Increment
</button>

<div>
Count: {count}
</div>

<input
type='number'
placeholder='enter number'
value={input}
onChange={(e) => setInput(e.target.
value)}

/>

<div>
Double: {doubleValue}
</div>
</div>
------------------------------------------------------------------------------

==================================================================================================================================
✨ #### useCallback hook ✨ 

https://18.react.dev/reference/react/useCallback#reference
------------------------------------------------------------------------------
//React.memo -> wrap -> component -> component
re-render tabhi hoga jab props change honge nahi toh
re-render nahi hoga

//if u r sending a function, then react.memo wont be
able to save you from re-renderingl


// we can avoid expencive call  by avoiding function recreation (not prevent from run like memo which store result not function logic)
------------------------------------------------------------------------------
import { useState } from 'react'
import './App.css'
import ChildComponent from './components/
ChildComponent';

function App() {
const [count, setCount] = useState(0);

//function handleClick() {
//setCount(count+1);


const handleClick = useCallback(() => {
setCount(count+1);
}, [count]);

return

(
<div>
<div>
Count: {count}
</div>
<br/>
<div>
<button onClick={handleClick}>
Increment
</button>
</div>
<br/> <br/>

----------------------------------------------
import React from 'react'

const ChildComponent = React.memo(     // ✏️  wrap funcrion in memo
(props) => {

console. log("Child Component got re-rendered
again");

return (
<div>
<button onClick={props.handleClick}>
{props.buttonName}
</button>
</div>

export default ChildComponent
//React.memo -> wrap -> component -> component
re-render tabhi hoga jab props change honge nahi toh
re-render nahi hoga

----------------------------------------------
==================================================================================================================================
 
==================================================================================================================================
✨ ####  Reducer useReducer hook ✨

App.jsx > App
import { useReducer, useState } from "react";

function App() {
const [state, dispatch] = useReducer(reducer, 0);
function reducer(state, action) {
if (action. type == "increment") {
return state + action.payload;

if (action. type == "decrement") {
return state - action.payload;

return
<div>
{state}
<button onClick={() => dispatch({ type: "increment", payload: 1 }) }>
Increment count
</button>
<button onClick={() => dispatch({ type: "decrement", payload: 1 }) }>
Decrement count
</button>
</div>

export default App;
---------------------------------------------------------------------------
Using Object As State In useReducer

import { useReducer, useState } from "react";

function App() {
" const [state, dispatch] = useReducer(reducer, { count: 0 });
function reducer(state, action)
if (action. type == "increment") {
return { ... state, count: state. count + action.payload }; // state + action.payload;

if (action. type == "decrement") {
return { ... state, count: state. count - action. payload };

return
<div>
{state. count}
<button onClick={() => dispatch({ type: "increment", payload: 1 }) }>
Increment count
</button>
<button onClick={() => dispatch({ type: "decrement", payload: 1 }) }>
Decrement count
</button>
</div>
---------------------------------------------------------------------------
Using Complex Object As State In useReducer

import { useReducer, useState } from "react";
function App() {
const [state, dispatch] = useReducer(reducer, { count: 0, incrementBy: 1 });
function reducer(state, action) {
if (action. type == "increment") {
return { ... state, count: state. count + state. incrementBy }; // state + action.payload;

if (action. type == "decrement") {
return { ... state, count: state. count - incrementBy };

if (action. type == "setIncrement") {
return { ... state, incrementBy: action.payload };

}

return (
<div>
{state. count}

<input
value={state. incrementBy}
onChange={ (e) =>
dispatch({ type: "setIncrement", payload: Number(e. target.value) })

type="text"
name=""
id=""

/>
<button onClick={() => dispatch({ type: "increment", payload: 1 }) }>
Increment count
</button>
<button onClick={() => dispatch({ type: "decrement", payload: 1 }) }>
Decrement count
</button>
</div>
}
====================================================================================
Spread Operator

const state = {count:0}
=>undefined
----------------
state

=>{count: 0}
----------------
{ ... state}
=>{count: 0}
----------------
{ ... state, count:1}
=>{count: 1}
----------------
const state = {count:0,someValue:1}

{ ... state, count:2}
=>{count: 2, someValue: 1}
----------------
====================================================================================
  
✨ ####  Using Reducer With Context Provider ✨
  ------------------------------------------------
 src > context > UserContext.jsx > UserProvider > userReducer
import { createContext, useReducer } from "react";
import { useState } from "react";
const userContext = createContext();

function UserProvider({ children }) {
//const [user, setUser] = useState("guest");
function userReducer(state, action) {
if (action. type == "login") {

return action.payload;

if (action. type == "logout")

return "Guest";

const [user, dispatch] = useReducer(userReducer, "");

return (
<userContext.Provider value={{ user, dispatch }}>
{children}
</userContext. Provider> 
------------------------------------------------------------------------------------------------
>src > Logout.jsx > Logout
import { useContext } from "react";
import { userContext } from "./context/UserContext";

export default function Logout() {
const { dispatch } = useContext(userContext);
return
<div>
<button onClick={() => dispatch({ type: "logout", payload: "Guest" }) }>
Logout
</button>
</div>
------------------------------------------------------------------------------------------------
src > Login.jsx > Login > handleSubmit
Enport { userContext } trom "./context/UserContext";

export default function Login() {
const [value, setValue] = useState["");
const { user, dispatch } = useContext(userContext);
function handleSubmit(e) <
e.preventDefault();
//setUser(value);
dispatch({ type: "login", payload: value });

return (
<div>
<form onSubmit={handleSubmit}>
<input
value={value}
onChange={(e) => setValue(e.target.value)}
type="text"

<button type="submit">Login</button>
</form>
</div>
);
==================================================================================================================================
  
✨ ####  Passing Complex State To Reducer ✨


==================================================================================================================================

==================================================================================================================================

==================================================================================================================================

==================================================================================================================================

==================================================================================================================================

==================================================================================================================================

==================================================================================================================================

==================================================================================================================================

==================================================================================================================================

==================================================================================================================================

==================================================================================================================================

==================================================================================================================================

==================================================================================================================================

==================================================================================================================================